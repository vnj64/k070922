// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "description": "Хэндлер для авторизации пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Хэндлер для авторизации пользователя",
                "parameters": [
                    {
                        "description": "Данные для авторизации пользователя",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/project_domain_props.LoginUserReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/project_domain_props.LoginUserResp"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/project_pkg_errs.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/project_pkg_errs.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/user": {
            "post": {
                "description": "Создание пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Создание пользователя",
                "parameters": [
                    {
                        "description": "Данные для создания пользователя",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/project_shared_dto.CreateUserDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/project_shared_dto.CreateUserResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/project_pkg_errs.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/project_pkg_errs.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "project_domain_props.LoginUserReq": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "project_domain_props.LoginUserResp": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "project_pkg_errs.Code": {
            "type": "integer",
            "enum": [
                500,
                400,
                401,
                403,
                404,
                422,
                429,
                201
            ],
            "x-enum-comments": {
                "BadRequest": "Некорректный запрос",
                "Created": "Успешно создано",
                "Forbidden": "Запрещено",
                "InternalServerError": "Внутренняя ошибка сервера",
                "NotFound": "Не найдено",
                "TooManyRequests": "Слишком много запросов",
                "Unauthorized": "Неавторизованный доступ",
                "UnprocessableEntity": "Невозможность обработать запрос (например, валидация)"
            },
            "x-enum-varnames": [
                "InternalServerError",
                "BadRequest",
                "Unauthorized",
                "Forbidden",
                "NotFound",
                "UnprocessableEntity",
                "TooManyRequests",
                "Created"
            ]
        },
        "project_pkg_errs.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/definitions/project_pkg_errs.Code"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "project_shared_dto.CreateUserDto": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "second_name": {
                    "type": "string"
                }
            }
        },
        "project_shared_dto.CreateUserResponseDto": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "second_name": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type “Bearer {token}”",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Golang Project Template",
	Description:      "API в рамках курса РПМ",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
